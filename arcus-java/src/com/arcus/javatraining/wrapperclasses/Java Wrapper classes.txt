Wrapper classes:
=================

- The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive.

- Since J2SE 5.0, autoboxing and unboxing feature convert primitives into objects and objects into primitives automatically. 

- The automatic conversion of primitive into an object is known as autoboxing and vice-versa unboxing.

- Java is an object-oriented programming language  A simple file can be treated as an object , 
an address of a system can be seen as an object , 
an image can be treated as an object (with java.awt.Image) and a simple data type can be converted into an object (with wrapper classes). 

- so we need to deal with objects many times like in Collections, Serialization, Synchronization, etc.

= The primitive data types are not objects; they do not belong to any class; they are defined in the language itself. 

- Collections,  accept only objects to store. in earlier version of java,
 A data type is to be converted into an object and then added to a Stack or Vector etc. 
 For this conversion, the designers introduced wrapper classes.
 
- Different scenarios, where we need to use the wrapper classes.
-- Collection Framework:
- Serialization

So what exactly is a wrapper class ?

- What are Wrapper classes?

- As the name says, a wrapper class wraps (encloses) around a primitive data type and gives it an object appearance. 
- Wherever, the data type is required as an object, this object can be used.
-  Wrapper classes include methods to unwrap the object and give back the data type. 
- It can be compared with a chocolate. The manufacturer wraps the chocolate with some foil or paper to prevent from pollution. 
The user takes the chocolate, removes and throws the wrapper and eats it.

- Prior to JDK 5, you need to explicitly wrap a primitive value into an object and unwrap the primitive value from the wrapper object, for example,


Integer intObj = new Integer(5566);    // wrap an int to Integer by constructing an instance of Integer
int i = intObj.intValue();             // unwrap Integer to int
 
Double doubleObj = new Double(55.66);  // wrap double to Double
double d = doubleObj.doubleValue();    // unwrap Double to double




The eight classes of the java.lang package are known as wrapper classes in Java.

Primitive Type	Wrapper class
==============  ==============
boolean			Boolean
char			Character
byte			Byte
short			Short
int		    	Integer
long			Long
float			Float
double			Double



Autoboxing
===========
- The automatic conversion of primitive data type into its corresponding wrapper class is known as autoboxing,
-  for example, byte to Byte, char to Character, int to Integer, long to Long, float to Float, boolean to Boolean, double to Double, and short to Short.

Since Java 5, we do not need to use the valueOf() method of wrapper classes to convert the primitive into objects.

Wrapper class Example: Primitive to Wrapper
============================================

//Java program to convert primitive into objects  
//Autoboxing example of int to Integer  
public class WrapperExample1{  
public static void main(String args[]){  
//Converting int into Integer  
int a=20;  
Integer i=Integer.valueOf(a);//converting int into Integer explicitly  
Integer j=a;//autoboxing, now compiler will write Integer.valueOf(a) internally  
  
System.out.println(a+" "+i+" "+j);  
}}  


Unboxing
========
- The automatic conversion of wrapper type into its corresponding primitive type is known as unboxing. 
- It is the reverse process of autoboxing. 
- Since Java 5, we do not need to use the intValue() method of wrapper classes to convert the wrapper type into primitives.


//Java program to convert object into primitives  
================================================
//Unboxing example of Integer to int  
public class WrapperExample2{    
public static void main(String args[]){    
//Converting Integer to int    
Integer a=new Integer(3);    
int i=a.intValue();//converting Integer to int explicitly  
int j=a;//unboxing, now compiler will write a.intValue() internally    
    
System.out.println(a+" "+i+" "+j);    
}}   


//Java Program to convert all primitives into its corresponding   
//wrapper objects and vice-versa  
public class WrapperExample3{  
public static void main(String args[]){  
byte b=10;  
short s=20;  
int i=30;  
long l=40;  
float f=50.0F;  
double d=60.0D;  
char c='a';  
boolean b2=true;  
  
//Autoboxing: Converting primitives into objects  
Byte byteobj=b;  
Short shortobj=s;  
Integer intobj=i;  
Long longobj=l;  
Float floatobj=f;  
Double doubleobj=d;  
Character charobj=c;  
Boolean boolobj=b2;  
  
//Printing objects  
System.out.println("---Printing object values---");  
System.out.println("Byte object: "+byteobj);  
System.out.println("Short object: "+shortobj);  
System.out.println("Integer object: "+intobj);  
System.out.println("Long object: "+longobj);  
System.out.println("Float object: "+floatobj);  
System.out.println("Double object: "+doubleobj);  
System.out.println("Character object: "+charobj);  
System.out.println("Boolean object: "+boolobj);  
  
//Unboxing: Converting Objects to Primitives  
byte bytevalue=byteobj;  
short shortvalue=shortobj;  
int intvalue=intobj;  
long longvalue=longobj;  
float floatvalue=floatobj;  
double doublevalue=doubleobj;  
char charvalue=charobj;  
boolean boolvalue=boolobj;  
  
//Printing primitives  
System.out.println("---Printing primitive values---");  
System.out.println("byte value: "+bytevalue);  
System.out.println("short value: "+shortvalue);  
System.out.println("int value: "+intvalue);  
System.out.println("long value: "+longvalue);  
System.out.println("float value: "+floatvalue);  
System.out.println("double value: "+doublevalue);  
System.out.println("char value: "+charvalue);  
System.out.println("boolean value: "+boolvalue);  
}}  
